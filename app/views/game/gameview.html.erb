<% if session[:lgin] %>
<script type="text/javascript">

      document.addEventListener("DOMContentLoaded", init, false);
      var ctx;
      var buttonstate=1;
      var resources = <%= @buildpts %>;
      function init(){
        ctx = document.getElementById("canvas").getContext("2d");
        var canvas = document.getElementById("canvas");
        canvas.addEventListener("mousedown", getPosition, false);
        update();
        periodicUpdate();
      }
      var res = 25
      var rectangle = function(rectx, recty, width, height, name, itemtype, health){
      	this.x = rectx;
      	this.y = recty;
      	this.w = width;
      	this.h = height;
      	this.name = name;
      	this.block = true;
        this.itemtype = itemtype;
        this.health = health
      };
      var collidableObjects = [];
      var offsetX = 0;
      var offsetY = 0;
      var keysDown = {};
      var background = new Image();
      background.src = "../assets/star-space-tile.jpg";


      function getPosition(event){
        var x = new Number();
        var y = new Number();
        var canvas = document.getElementById("canvas");

        if (event.x != undefined && event.y != undefined)
        {
          x = event.x;
          y = event.y;
        }
        else // Firefox method to get the position
        {
          x = event.clientX + document.body.scrollLeft +
              document.documentElement.scrollLeft;
          y = event.clientY + document.body.scrollTop +
              document.documentElement.scrollTop;
        }

        x -= canvas.offsetLeft;
        y -= canvas.offsetTop;

        x = Math.floor(x / res) * res;
        y = Math.floor(y / res) * res;

        //alert("x: " + x + "  y: " + y);
        //getObject(x,y);
        if(x>=50 || y >= 250){
          if(buttonstate == 1){
            placeObject(x,y,2);
          }else if(buttonstate == 2){
            placeObject(x,y,1);
          }else if(buttonstate == 3){
            placeObject(x,y,3);
          }else if(buttonstate == 4){
            placeObject(x,y,4);
          }else {
            removeObject(x,y);
          }
        } else {
          if(y<50){
            //Button 1
            console.log("Button 1 selected");
            buttonstate = 1;
            drawInterface();
          }else if(y<100 && y>=50){
            //Button 2
            console.log("Button 2 selected");
            buttonstate = 2;
            drawInterface();
          } else if(y<150 && y>=100){
            //Button 2
            console.log("Button 3 selected");
            buttonstate = 3;
            drawInterface();
          } else if(y<200 && y>=150){
            //Button 2
            console.log("Button 4 selected");
            buttonstate = 4;
            drawInterface();
          } else {
            console.log("Button 0 selected");
            buttonstate = 0;
            drawInterface();
          }
        }
      }
      addEventListener("keydown", function(e){
	       keysDown[e.keyCode] = true;
         updateLoc();
      }, false);
      addEventListener("keyup", function(e){
	       delete keysDown[e.keyCode];
       }, false);

      function updateLoc(){
        if (37 in keysDown){
      		offsetX += 25;
      	}
      	if (39 in keysDown){
      		offsetX -= 25;
      	}
      	if (38 in keysDown){
      		offsetY += 25;
      	}
      	if (40 in keysDown){
      		offsetY -= 25;
      	}
        update();
      }
      function drawInterface(){
        ctx.fillStyle="lightgrey";
        ctx.fillRect(0,0,50,250);
        if(buttonstate == 1){
          ctx.fillStyle="blue";
          ctx.fillRect(0,0,50,50);
        } else if(buttonstate == 2) {
          ctx.fillStyle="blue";
          ctx.fillRect(0,50,50,50);
        } else if(buttonstate == 3) {
          ctx.fillStyle="blue";
          ctx.fillRect(0,100,50,50);
        } else if(buttonstate == 4) {
          ctx.fillStyle="blue";
          ctx.fillRect(0,150,50,50);
        } else {
          ctx.fillStyle="blue";
          ctx.fillRect(0,200,50,50);
        }
        ctx.fillStyle="red";
        ctx.font="20px Arial";
        ctx.fillText(resources,500,20);
        ctx.fillText("Conn", 1, 25);
        ctx.fillText("Base", 1, 75);
        ctx.fillText("Turr", 1, 125);
        ctx.fillText("Res", 1, 175);
        ctx.fillText("Rem", 1, 225);
      }
      function placeObject(x,y,t){
        x = x-offsetX;
        y = y-offsetY;
        if(resources>0){
          for(var i = 0; i < collidableObjects.length; i++){
            if(collidableObjects[i].x-offsetX == x && collidableObjects[i].y-offsetY == y && collidableObjects[i].itemtype != 5){
              alert("Already something there");
              return;
            }
          }
          //collidableObjects.push(new rectangle(x, y, 25, 25, "<%= @userid %>"));
          //console.log("Placed Object at " + x + "," + y);
          //resources--;
          postPlace(x,y,t);
          //update();
        }
      }
      function removeObject(x,y){
        x=x-offsetX;
        y=y-offsetY;
        for(var i = 0; i < collidableObjects.length; i++){
          if(collidableObjects[i].x == x && collidableObjects[i].y == y){
              if(collidableObjects[i].name == "<%= @userid %>"){
              //collidableObjects.splice(i, 1);
              //resources++;
              removePlace(x,y);
              //update();
              return;
            } else {
              //alert("Not yours");
            }
          }
        }
      }
      function getObject(x, y){
        x=x-offsetX;
        y=y-offsetY;
        for(var i=0; i<collidableObjects.length; i++){
          if(x > collidableObjects[i].x && x < collidableObjects[i].x + collidableObjects[i].w){
            if(y > collidableObjects[i].y && x < collidableObjects[i].y + collidableObjects[i].y){
              alert("HIT! at " + x + "," + y + " ");
            }
          }

        }
        //update();
      }
      function postPlace(x , y, t){
        console.log("placing item of type:" + t)
        post('/placeconnector', {
          x: x,
          y: y,
          t: t
        }, function(data) {
          console.log(data);
          });

          updatePts();
          updateState();
          //location.reload();

      };
      function removePlace(x , y){
        post('/remove', {
          x: x,
          y: y
        }, function(data) {

        }, function(error){
          console.log(error['responseText']);
        });
          updatePts();
          updateState();
      };
      function update(){
        //console.log("Updating");
        ctx.clearRect(0,0,1080,760);
        var ptrn = ctx.createPattern(background, 'repeat'); // Create a pattern with this image, and set it to "repeat".
        ctx.fillStyle = ptrn;
        ctx.translate((offsetX % 400), (offsetY % 400));
        ctx.fillRect(-400, -400, canvas.width+800, canvas.height+800);
        ctx.translate(-(offsetX % 400), -(offsetY % 400));
        for(var i = 0; i<collidableObjects.length; i++){
          if(collidableObjects[i].name == "<%= @userid %>" && collidableObjects[i].itemtype == 1){
            ctx.fillStyle="#4B6E5A"
            ctx.fillRect(collidableObjects[i].x-100+offsetX, collidableObjects[i].y-100+offsetY, 225, 225)
          }
        }
        for(var i = 0; i<collidableObjects.length; i++){
          //console.log("Draw");

          if(collidableObjects[i].name == "<%= @userid %>"){
            ctx.fillStyle="green";
          } else if (collidableObjects[i].itemtype == 5){
            ctx.fillStyle="grey";
          } else {
            ctx.fillStyle="red";
          }
          ctx.fillRect(collidableObjects[i].x+offsetX, collidableObjects[i].y+offsetY, collidableObjects[i].h, collidableObjects[i].w);
          if(collidableObjects[i].itemtype == 1){
            ctx.fillStyle="blue";
            ctx.fillRect(collidableObjects[i].x + 3+offsetX, collidableObjects[i].y + 3+offsetY, collidableObjects[i].h-6, collidableObjects[i].w-6);
          }
          if(collidableObjects[i].itemtype == 3){
            ctx.fillStyle="blue";
            ctx.fillRect(collidableObjects[i].x + 3+offsetX, collidableObjects[i].y + 10+offsetY, collidableObjects[i].h-6, collidableObjects[i].w-20);
            ctx.fillRect(collidableObjects[i].x + 10+offsetX, collidableObjects[i].y + 3+offsetY, collidableObjects[i].h-20, collidableObjects[i].w-6);
          }
          if(collidableObjects[i].itemtype == 4){
            ctx.fillStyle="blue";
            ctx.fillText("X", collidableObjects[i].x + 5+offsetX, collidableObjects[i].y + 18+offsetY);
          }
          if(collidableObjects[i].itemtype == 5){
            ctx.fillStyle="blue";
            ctx.fillText("R", collidableObjects[i].x + 5+offsetX, collidableObjects[i].y+offsetY + 18);
          }
          ctx.fillStyle="#FFFF00";
          if(collidableObjects[i].itemtype == 1){
            percent = collidableObjects[i].health/200
            ctx.fillRect(collidableObjects[i].x+offsetX, collidableObjects[i].y+19+offsetY, collidableObjects[i].w * percent, 3);
          }else if(collidableObjects[i].itemtype == 2){
            percent = collidableObjects[i].health/25
            ctx.fillRect(collidableObjects[i].x+offsetX, collidableObjects[i].y+19+offsetY, collidableObjects[i].w * percent, 3);
          }else if(collidableObjects[i].itemtype == 3){
            percent = collidableObjects[i].health/100
            ctx.fillRect(collidableObjects[i].x+offsetX, collidableObjects[i].y+19+offsetY, collidableObjects[i].w * percent, 3);
          }else if(collidableObjects[i].itemtype == 4){
            percent = collidableObjects[i].health/60
            ctx.fillRect(collidableObjects[i].x+offsetX, collidableObjects[i].y+19+offsetY, collidableObjects[i].w * percent, 3);
          }

        }


        drawInterface();

      }
      function updateState(){
        $.get('/getstate.json').success(function(mapdata){

          collidableObjects = [];
          for(var i = 0; i < mapdata.length; i++){

            collidableObjects.push(new rectangle(mapdata[i]['x'], mapdata[i]['y'], 25, 25, mapdata[i]['user_id'], mapdata[i]['itemtype_id'], mapdata[i]['health']));
          }
          updatePts();
        }).fail(function(error){
          //alert(error);
          console.log("Error");
          console.log(error);
        });
      }
      function updatePts(){
        $.get('/getpts.json').success(function(data){
          console.log(data);
          resources = data;
          update();
        }).fail(function(error){
          //alert(error);
          console.log("Error");
          console.log(error);
        });
      }
      function periodicUpdate(){
        updateState();
        setTimeout(periodicUpdate, 1000);
      }
    </script>
<canvas id="canvas" width="1080" height="700" style="background-color: #000;"></canvas>
<% else %>
Login to play
<% end %>
